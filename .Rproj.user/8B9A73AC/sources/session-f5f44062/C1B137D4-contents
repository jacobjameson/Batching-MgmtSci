library(lfe)
library(stargazer)
library(texreg)
library(xtable)
library(tidyverse)
library(fixest)
library(sandwich)
library(lmtest)
library(mediation)

data <- final %>%
  group_by(complaint_esi) %>%
  filter(n() > 1) %>%
  ungroup() %>%
  group_by(complaint_esi) %>%
  mutate(batchmean = mean(batched)) %>%
  ungroup() %>% 
  filter(batchmean > 0.05, imaging == 1)

data$ln_ED_LOS <- log(data$ED_LOS)
data$ln_disp_time <- log(data$DISP_TIME)
data$ln_treat_time <- log(data$treatment_time + 1)

data$capacity_level <- factor(data$capacity_level,
                              levels = c('Normal Operations', 
                                         'Minor Overcapacity', 
                                         'Major Overcapacity'))

################################################################################
# First stage: Table 2
################################################################################

sink('outputs/Table2.txt') 

print('First-Stage Results: Batch Tendency and Batching')

# First-stage model 1: Baseline model ------------------------------------------
fs_model_1 <- feols(batched ~ batch.tendency | 
                      dayofweekt + month_of_year, 
                    cluster = ~ED_PROVIDER, data = data)

print(fs_model_1)
wald(fs_model_1, keep = "batch.tendency", cluster = "ED_PROVIDER")

# First-stage model 2: Controls  -----------------------------------------------
fs_model_2 <- feols(batched ~ batch.tendency +
                      tachycardic + tachypneic + febrile + hypotensive + 
                      EXPERIENCE + PROVIDER_SEX + 
                      ARRIVAL_AGE_DI + capacity_level | 
                      dayofweekt + month_of_year + complaint_esi + race, 
                    cluster = ~ED_PROVIDER, data = data)


print(fs_model_2)
wald(fs_model_2, keep = "batch.tendency", cluster = "ED_PROVIDER")

# ------------------------------------------------------------------------------
# Table results

etable(fs_model_1, fs_model_2, cluster = "ED_PROVIDER",
       se = "cluster", keep = c("batch.tendency"))

print(paste('Sample mean:', mean(data$batched)))
print(paste('Sample sd:', sd(data$batched)))

quantile(data$batch.tendency, probs = seq(0, 1, 0.1))[c(2,10)]
sink()


lab_model_1 <- feols(batched ~ batch.tendency +
                      tachycardic + tachypneic + febrile + hypotensive + 
                      EXPERIENCE + PROVIDER_SEX + 
                      ARRIVAL_AGE_DI + capacity_level | 
                      dayofweekt + month_of_year + complaint_esi + race, 
                    cluster = ~ED_PROVIDER, data = data)

lab_model_2 <- feols(batched ~ batch.tendency +
                      tachycardic + tachypneic + febrile + hypotensive + 
                      EXPERIENCE + PROVIDER_SEX + admit.tendency +
                      ARRIVAL_AGE_DI + capacity_level | 
                      dayofweekt + month_of_year + complaint_esi + race, 
                    cluster = ~ED_PROVIDER, data = data)

lab_model_3 <- feols(batched ~ batch.tendency +
                      tachycardic + tachypneic + febrile + hypotensive + 
                      EXPERIENCE + PROVIDER_SEX + test.tendency + admit.tendency +
                      ARRIVAL_AGE_DI + capacity_level | 
                      dayofweekt + month_of_year + complaint_esi + race, 
                    cluster = ~ED_PROVIDER, data = data)


etable(lab_model_1, lab_model_2, lab_model_3, cluster = "ED_PROVIDER",
       se = "cluster", keep = c("batch.tendency", 'admit.tendency', 'test.tendency'))

wald(lab_model_1, keep = "batch.tendency", cluster = "ED_PROVIDER")
wald(lab_model_2, keep = "batch.tendency", cluster = "ED_PROVIDER")
wald(lab_model_3, keep = "batch.tendency", cluster = "ED_PROVIDER")


################################################################################
#-------------------------------------------------------------------------------
# Reduced Form
#-------------------------------------------------------------------------------
################################################################################

sink('outputs/Table3.txt')

print('First-Stage Results: Batch Tendency and Batching')
# ------------------------------------------------------------------------------

feols(
  LAB_PERF ~ batch.tendency + # instrument
    tachycardic + tachypneic + febrile + hypotensive + # patient variables
    ARRIVAL_AGE_DI  + admit.tendency +test.tendency + # patient variables
    capacity_level + # ED variables
    EXPERIENCE + PROVIDER_SEX | # physician variables
    dayofweekt + month_of_year + # time FE
    complaint_esi + race, # patient variables
  cluster = ~ED_PROVIDER, data = data)

feols(
  LAB_PERF ~ batch.tendency + # instrument
    tachycardic + tachypneic + febrile + hypotensive + # patient variables
    ARRIVAL_AGE_DI  + admit.tendency  +# patient variables
    capacity_level + # ED variables
    EXPERIENCE + PROVIDER_SEX | # physician variables
    dayofweekt + month_of_year + # time FE
    complaint_esi + race, # patient variables
  cluster = ~ED_PROVIDER, data = data)


feols(
  LAB_PERF ~ batch.tendency + # instrument
    tachycardic + tachypneic + febrile + hypotensive + # patient variables
    ARRIVAL_AGE_DI  + # patient variables
    capacity_level + # ED variables
    EXPERIENCE + PROVIDER_SEX | # physician variables
    dayofweekt + month_of_year + # time FE
    complaint_esi + race, # patient variables
  cluster = ~ED_PROVIDER, data = data)



rf_model_disp <- feols(
  ln_disp_time ~ batch.tendency + # instrument
  tachycardic + tachypneic + febrile + hypotensive + # patient variables
  ARRIVAL_AGE_DI + # patient variables
  capacity_level + # ED variables
  EXPERIENCE + PROVIDER_SEX | # physician variables
  dayofweekt + month_of_year + # time FE
  complaint_esi + race, # patient variables
  cluster = ~ED_PROVIDER, data = data)

rf_model_los <- feols(
  ln_ED_LOS ~ batch.tendency + # instrument
    tachycardic + tachypneic + febrile + hypotensive + # patient variables
    ARRIVAL_AGE_DI + # patient variables
    capacity_level + # ED variables
    EXPERIENCE + PROVIDER_SEX | # physician variables
    dayofweekt + month_of_year + # time FE
    complaint_esi + race, # patient variables
  cluster = ~ED_PROVIDER, data = data)

rf_model_img <- feols(
  imgTests ~ batch.tendency + # instrument
    tachycardic + tachypneic + febrile + hypotensive + # patient variables
    ARRIVAL_AGE_DI + # patient variables
    capacity_level + # ED variables
    EXPERIENCE + PROVIDER_SEX | # physician variables
    dayofweekt + month_of_year + # time FE
    complaint_esi + race, # patient variables
  cluster = ~ED_PROVIDER, data = data)

rf_model_ra <- feols(
  RTN_72_HR_ADMIT ~ batch.tendency + # instrument
    tachycardic + tachypneic + febrile + hypotensive + # patient variables
    ARRIVAL_AGE_DI + # patient variables
    capacity_level + # ED variables
    EXPERIENCE + PROVIDER_SEX | # physician variables
    dayofweekt + month_of_year + # time FE
    complaint_esi + race, # patient variables
  cluster = ~ED_PROVIDER, data = data)

# ------------------------------------------------------------------------------

etable(rf_model_disp, rf_model_los,rf_model_img, rf_model_ra, 
       cluster = "ED_PROVIDER", se = "cluster", 
       keep = c("batch.tendency"))


quantile(data$batch.tendency, probs = seq(0, 1, 0.1))[c(2,10)]

# Calculate F-statistics for reduced-form models
wald_rf_1 <- wald(rf_model_disp, cluster = "ED_PROVIDER")
wald_rf_2 <- wald(rf_model_los, cluster = "ED_PROVIDER")
wald_rf_3 <- wald(rf_model_img, cluster = "ED_PROVIDER")
wald_rf_4 <- wald(rf_model_ra, cluster = "ED_PROVIDER")


print(paste('ln_disp_time mean:', mean(data$ln_disp_time)))
print(paste('ln_disp_time sd:', sd(data$ln_disp_time)))

print(paste('ln_ED_LOS mean:', mean(data$ln_ED_LOS)))
print(paste('ln_ED_LOS sd:', sd(data$ln_ED_LOS)))

print(paste('imgTests mean:', mean(data$imgTests)))
print(paste('imgTests sd:', sd(data$imgTests)))

print(paste('RTN_72_HR_ADMIT mean:', mean(data$RTN_72_HR_ADMIT)))
print(paste('RTN_72_HR_ADMIT sd:', sd(data$RTN_72_HR_ADMIT)))

sink()

################################################################################
#-------------------------------------------------------------------------------
# IV Results
#-------------------------------------------------------------------------------
################################################################################

run_models <- function(data, y_var) {

  # Model 1: Mean and SD for batched == 0
  mean_batched_0 <- mean(data[data$batched == 0, ][[y_var]], na.rm = TRUE)
  sd_batched_0 <- sd(data[data$batched == 0, ][[y_var]], na.rm = TRUE)
  
  # Model 2: 2SLS without controls
  model_2 <- feols(
    as.formula(paste(y_var, "~ 0 | dayofweekt + month_of_year | batched ~ batch.tendency")),
    cluster = ~ED_PROVIDER,
    data = data
  )
  
  # Model 3: 2SLS with controls
  model_3 <- feols(
    as.formula(paste(
      y_var, "~ tachycardic + tachypneic + hrs_in_shift + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +",
      "ARRIVAL_AGE_DI + LAB_PERF | dayofweekt + month_of_year + complaint_esi + race + GENDER + capacity_level |",
      "batched ~ batch.tendency"
    )),
    cluster = ~ED_PROVIDER,
    data = data
  )
  
  # Model 4: OLS without controls
  model_4 <- feols(
    as.formula(paste(y_var, "~ batched | dayofweekt + month_of_year")),
    cluster = ~ED_PROVIDER,
    data = data
  )
  
  # Model 5: OLS with controls
  model_5 <- feols(
    as.formula(paste(
      y_var, "~ batched + tachycardic + tachypneic + hrs_in_shift + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +",
      "ARRIVAL_AGE_DI + LAB_PERF | dayofweekt + month_of_year + complaint_esi + race + GENDER + capacity_level"
    )),
    cluster = ~ED_PROVIDER,
    data = data
  )
  
  # Extract coefficients and standard errors for batched/fit_batched
  results <- data.frame(
    Model = c("Mean (Sequenced)", "SD (Sequenced)", "2SLS No Controls", 
              "2SLS With Controls", "OLS No Controls", "OLS With Controls"),
    Coefficient = c(
      mean_batched_0,
      sd_batched_0,
      coef(model_2)["fit_batched"],
      coef(model_3)["fit_batched"],
      coef(model_4)["batched"],
      coef(model_5)["batched"]
    ),
    SE = c(
      NA,
      NA,
      se(model_2)["fit_batched"],
      se(model_3)["fit_batched"],
      se(model_4)["batched"],
      se(model_5)["batched"]
    )
  )
  
  print(results)
  return(etable(model_2, model_3, model_4, 
                model_5, cluster = "ED_PROVIDER", 
                se = "cluster",  keep = c("batched"))
)
}

run_models(data, "ln_disp_time")
run_models(data, "ln_ED_LOS")
run_models(data, "imgTests")
run_models(data, "RTN_72_HR_ADMIT")

run_models(data, "RTN_72_HR")



feols(
  as.formula(paste(
    'NON_CON_CT_PERF', "~ tachycardic + tachypneic + febrile + hypotensive + capacity_level + EXPERIENCE + PROVIDER_SEX +",
    "ARRIVAL_AGE_DI + LAB_PERF + US_PERF +  XR_PERF + CON_CT_PERF | dayofweekt + month_of_year + complaint_esi + race + GENDER |",
    "batched ~ batch.tendency"
  )),
  cluster = ~ED_PROVIDER,
  data = data
) %>%
summary()

feols(
  as.formula(paste(
    'CON_CT_PERF', "~ tachycardic + tachypneic + febrile + hypotensive + capacity_level + EXPERIENCE + PROVIDER_SEX +",
    "ARRIVAL_AGE_DI + LAB_PERF + US_PERF +  XR_PERF + NON_CON_CT_PERF | dayofweekt + month_of_year + complaint_esi + race + GENDER |",
    "batched ~ batch.tendency"
  )),
  cluster = ~ED_PROVIDER,
  data = data
) %>%
  summary()


feols(
  as.formula(paste(
    'US_PERF', "~ tachycardic + tachypneic + febrile + hypotensive + capacity_level + EXPERIENCE + PROVIDER_SEX +",
    "ARRIVAL_AGE_DI + LAB_PERF + CON_CT_PERF +  XR_PERF + NON_CON_CT_PERF | dayofweekt + month_of_year + complaint_esi + race + GENDER |",
    "batched ~ batch.tendency"
  )),
  cluster = ~ED_PROVIDER,
  data = data
) %>%
  summary()

feols(
  as.formula(paste(
    'XR_PERF', "~ tachycardic + tachypneic + febrile + hypotensive + capacity_level + EXPERIENCE + PROVIDER_SEX +",
    "ARRIVAL_AGE_DI + LAB_PERF + CON_CT_PERF +  US_PERF + NON_CON_CT_PERF | dayofweekt + month_of_year + complaint_esi + race + GENDER |",
    "batched ~ batch.tendency"
  )),
  cluster = ~ED_PROVIDER,
  data = data
) %>%
  summary()



run_models(data, "admit")



feols(ln_ED_LOS ~ tachycardic + tachypneic + febrile + hypotensive + capacity_level + EXPERIENCE + PROVIDER_SEX  +
        ARRIVAL_AGE_DI | dayofweekt + month_of_year + complaint_esi + race + GENDER |
        batched ~ batch.tendency,
      cluster = ~ED_PROVIDER,
      data = data
)
feols(ln_ED_LOS ~ tachycardic + tachypneic + febrile + hypotensive + capacity_level + EXPERIENCE + PROVIDER_SEX  +
        ARRIVAL_AGE_DI + admit.tendency  | dayofweekt + month_of_year + complaint_esi + race + GENDER |
        batched ~ batch.tendency,
      cluster = ~ED_PROVIDER,
      data = data
)
feols(ln_ED_LOS ~ tachycardic + tachypneic + febrile + hypotensive + capacity_level + EXPERIENCE + PROVIDER_SEX  +
    ARRIVAL_AGE_DI + admit.tendency + test.tendency | dayofweekt + month_of_year + complaint_esi + race + GENDER |
    batched ~ batch.tendency,
  cluster = ~ED_PROVIDER,
  data = data
)

################################################################################


mean(subset(data, capacity_level == 'Normal Operations')$batched)

feols(ln_ED_LOS ~  tachycardic + tachypneic + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +
        ARRIVAL_AGE_DI |
        dayofweekt + month_of_year + complaint_esi | batched ~ batch.tendency,
      cluster = ~ED_PROVIDER, data = subset(data, capacity_level == 'Normal Operations'))

feols(ln_disp_time~  tachycardic + tachypneic + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +
        ARRIVAL_AGE_DI |
        dayofweekt + month_of_year + complaint_esi | batched ~ batch.tendency,
      cluster = ~ED_PROVIDER, data = subset(data, capacity_level == 'Normal Operations'))

feols(imgTests~  tachycardic + tachypneic + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +
        ARRIVAL_AGE_DI |
        dayofweekt + month_of_year + complaint_esi | batched ~ batch.tendency,
      cluster = ~ED_PROVIDER, data = subset(data, capacity_level == 'Normal Operations'))

feols(RTN_72_HR_ADMIT ~  tachycardic + tachypneic + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +
        ARRIVAL_AGE_DI |
        dayofweekt + month_of_year + complaint_esi | batched ~ batch.tendency,
      cluster = ~ED_PROVIDER, data = subset(data, capacity_level == 'Normal Operations'))


mean(subset(data, capacity_level == 'Minor Overcapacity')$batched)

feols(ln_ED_LOS ~  tachycardic + tachypneic + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +
        ARRIVAL_AGE_DI |
        dayofweekt + month_of_year + complaint_esi | batched ~ batch.tendency,
      cluster = ~ED_PROVIDER, data = subset(data, capacity_level == 'Minor Overcapacity'))

feols(ln_disp_time~  tachycardic + tachypneic + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +
        ARRIVAL_AGE_DI |
        dayofweekt + month_of_year + complaint_esi | batched ~ batch.tendency,
      cluster = ~ED_PROVIDER, data = subset(data, capacity_level == 'Minor Overcapacity'))

feols(imgTests~  tachycardic + tachypneic + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +
        ARRIVAL_AGE_DI |
        dayofweekt + month_of_year + complaint_esi | batched ~ batch.tendency,
      cluster = ~ED_PROVIDER, data = subset(data, capacity_level == 'Minor Overcapacity'))

feols(RTN_72_HR_ADMIT ~  tachycardic + tachypneic + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +
        ARRIVAL_AGE_DI |
        dayofweekt + month_of_year + complaint_esi | batched ~ batch.tendency,
      cluster = ~ED_PROVIDER, data = subset(data, capacity_level == 'Minor Overcapacity'))


mean(subset(data, capacity_level == 'Major Overcapacity')$batched)

feols(ln_ED_LOS ~  tachycardic + tachypneic + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +
        ARRIVAL_AGE_DI |
        dayofweekt + month_of_year + complaint_esi | batched ~ batch.tendency,
      cluster = ~ED_PROVIDER, data = subset(data, capacity_level == 'Major Overcapacity'))

feols(ln_disp_time~  tachycardic + tachypneic + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +
        ARRIVAL_AGE_DI |
        dayofweekt + month_of_year + complaint_esi | batched ~ batch.tendency,
      cluster = ~ED_PROVIDER, data = subset(data, capacity_level == 'Major Overcapacity'))

feols(imgTests~  tachycardic + tachypneic + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +
        ARRIVAL_AGE_DI |
        dayofweekt + month_of_year + complaint_esi | batched ~ batch.tendency,
      cluster = ~ED_PROVIDER, data = subset(data, capacity_level == 'Major Overcapacity'))

feols(RTN_72_HR_ADMIT ~  tachycardic + tachypneic + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +
        ARRIVAL_AGE_DI |
        dayofweekt + month_of_year + complaint_esi | batched ~ batch.tendency,
      cluster = ~ED_PROVIDER, data = subset(data, capacity_level == 'Major Overcapacity'))


################################################################################
# Batching determinants
################################################################################

mod1 <- feols(batched ~ tachycardic + tachypneic + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +
                      ARRIVAL_AGE_DI  + capacity_level + hrs_in_shift | 
                      dayofweekt + month_of_year + complaint_esi, 
                    cluster = ~ED_PROVIDER, data = data)


mod2 <- feols(imgTests ~ tachycardic + tachypneic + febrile + hypotensive + EXPERIENCE + PROVIDER_SEX +
        ARRIVAL_AGE_DI  + capacity_level + hrs_in_shift | 
        dayofweekt + month_of_year + complaint_esi, 
      cluster = ~ED_PROVIDER, data = data)

etable(mod1, mod2)



################################################################################




data <- read_csv('outputs/data/final.csv')  %>%
  group_by(complaint_esi) %>%
  filter(n() > 1) %>%
  ungroup() %>%
  group_by(complaint_esi) %>%
  mutate(batchmean = mean(batched)) %>%
  ungroup() %>% filter(batchmean < 0.05) 


rf_model_disp <- feols(ln_disp_time ~ batch.tendency  +
                         tachycardic + tachypneic + febrile + hypotensive  + 
                         ARRIVAL_AGE_DI + capacity_level | 
                         dayofweekt + month_of_year + complaint_esi + race,  
                       cluster = ~ED_PROVIDER, data = data)

rf_model_los <- feols(ln_ED_LOS ~ batch.tendency  +
                        tachycardic + tachypneic + febrile + hypotensive  + 
                        ARRIVAL_AGE_DI + capacity_level | 
                        dayofweekt + month_of_year + complaint_esi + race,  
                      cluster = ~ED_PROVIDER, data = data)


rf_model_ra <- feols(RTN_72_HR_ADMIT ~ batch.tendency   +
                       tachycardic + tachypneic + febrile + hypotensive  + 
                       ARRIVAL_AGE_DI + capacity_level  | 
                       dayofweekt + month_of_year + complaint_esi + race,  
                     cluster = ~ED_PROVIDER, data = data)

# Display the results
etable(rf_model_disp, rf_model_los, rf_model_ra, 
       cluster = "ED_PROVIDER", se = "cluster", keep = c("batch.tendency"))




#-------------------------------------------------------------------------------
# compliers
library(fixest)
library(dplyr)

# Step 1: Fit the first-stage model
fs_model <- feols(
  batched ~ batch.tendency +
    tachycardic + tachypneic + febrile + hypotensive +
    ARRIVAL_AGE_DI + capacity_level |
    dayofweekt + month_of_year + complaint_esi + race,
  cluster = ~ED_PROVIDER,
  data = data
)

# Step 2: Identify the most lenient and strict providers
# Get the range of batch.tendency
most_lenient <- max(data$batch.tendency, na.rm = TRUE)
most_strict <- min(data$batch.tendency, na.rm = TRUE)

# Step 3: Predict probabilities for most lenient and strict providers
data <- data %>%
  mutate(
    pred_prob_most_lenient = predict(
      fs_model, newdata = mutate(data, batch.tendency = most_lenient), type = "response"
    ),
    pred_prob_most_strict = predict(
      fs_model, newdata = mutate(data, batch.tendency = most_strict), type = "response"
    )
  )

# Step 4: Calculate shares of compliers, always takers, and never takers
# Compliers
pi_c <- mean(data$pred_prob_most_lenient - data$pred_prob_most_strict, na.rm = TRUE)

# Always Takers
pi_a <- mean(data$pred_prob_most_strict, na.rm = TRUE)

# Never Takers
pi_n <- mean(1 - data$pred_prob_most_lenient, na.rm = TRUE)

# Output the results
results <- list(
  "Compliers (pi_c)" = pi_c,
  "Always Takers (pi_a)" = pi_a,
  "Never Takers (pi_n)" = pi_n
)

results


# ------------------------------------------------------------------------------

# Required libraries
library(dplyr)
library(fixest)

data <- read_csv('outputs/data/final.csv')





# Function to perform monotonicity tests for all variables
perform_monotonicity_test <- function(data, variables, outcome = "batched", instrument = "batch.tendency") {
  results <- data.frame(
    Variable = character(),
    Category = character(),
    Coefficient = numeric(),
    SE = numeric(),
    stringsAsFactors = FALSE
  )
  
  for (var in variables) {
    if (is.numeric(data[[var]]) || is.factor(data[[var]])) {
      # Treat binary variables as factors for category-wise analysis
      data[[var]] <- as.factor(data[[var]])
    }
    
    categories <- unique(data[[var]])
    
    for (cat in categories) {
      # Subset data for the current category
      subsample_data <- data %>% filter(!!sym(var) == cat)
      
      if (nrow(subsample_data) == 0) next
      
      # Run the first-stage regression
      model <- feols(as.formula(paste0(outcome, " ~ ", instrument)), data = subsample_data)
      
      # Extract coefficient and standard error
      coef <- coef(model)[[instrument]]
      se <- se(model)[[instrument]]
      
      # Append results
      results <- rbind(results, data.frame(
        Variable = var,
        Category = as.character(cat),
        Coefficient = coef,
        SE = se
      ))
    }
  }
  
  return(results)
}

# Variables and proper names mapping
variables <- c("CHIEF_COMPLAINT", "capacity_level", "GENDER", "race")

# Proper names mapping
proper_names <- c(
  "CHIEF_COMPLAINT" = "Chief Complaint",
  "tachycardic" = "Tachycardic",
  "tachypneic" = "Tachypneic",
  "febrile" = "Febrile",
  "hypotensive" = "Hypotensive",
  "capacity_level" = "Capacity Level",
  "GENDER" = "Gender",
  "race" = "Race"
)

# Perform monotonicity test
test_results <- perform_monotonicity_test(data, variables)

# Map proper names
test_results$Variable <- recode(test_results$Variable, !!!proper_names)

# Plot results
ggplot(test_results, aes(x = Coefficient, y = Category)) +
  geom_point(size = 3) +
  geom_errorbarh(aes(xmin = Coefficient - 1.96 * SE, xmax = Coefficient + 1.96 * SE), height = 0.2) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
  labs(title = "Monotonicity Test Results by Subsample",
       x = "Coefficient Estimate (Batch Tendency)",
       y = "Subsample Category",
       color = "Variable") +
  theme_few(base_size = 14) +
  theme(legend.position = "none")

ggsave("outputs/monotonicity_test.png", width = 11, height = 6, dpi = 300)








library(mediation)

fs <- feols(batched ~ batch.tendency  +
              tachycardic + tachypneic + febrile + hypotensive + 
              ARRIVAL_AGE_DI + capacity_level | 
              dayofweekt + month_of_year + complaint_esi + race, 
            cluster = ~ED_PROVIDER, data = data)

data$batched_hat <- predict(fs, newdata = data)

mediator_model1 <- lm(imgTests ~ batched_hat + tachycardic + tachypneic + febrile + 
                        hypotensive + ARRIVAL_AGE_DI + capacity_level + 
                        dayofweekt + month_of_year + complaint_esi + race, 
                      data = data)

mediator_model2 <- lm(admit ~ batched_hat + tachycardic + tachypneic + febrile + 
                        hypotensive + ARRIVAL_AGE_DI + capacity_level + 
                        dayofweekt + month_of_year + complaint_esi + race, 
                      data = data)

outcome_model1 <- lm(ln_ED_LOS ~ batched_hat + imgTests + tachycardic + 
                       tachypneic + febrile + hypotensive + ARRIVAL_AGE_DI + 
                       capacity_level + dayofweekt + month_of_year + 
                       complaint_esi + race, 
                     data = data)

outcome_model2 <- lm(ln_ED_LOS ~ batched_hat + admit + tachycardic + 
                       tachypneic + febrile + hypotensive + ARRIVAL_AGE_DI + 
                       capacity_level + dayofweekt + month_of_year + 
                       complaint_esi + race, 
                     data = data)



mediation_result1 <- mediate(mediator_model1, outcome_model1, 
                             treat = "batched_hat", mediator = "imgTests", 
                             robustSE = TRUE)

summary(mediation_result1)


mediator_model2 <- lm(admit ~ batched_hat + tachycardic + tachypneic + febrile + 
                        hypotensive + ARRIVAL_AGE_DI + capacity_level + 
                        dayofweekt + month_of_year + complaint_esi + race, 
                      data = data)

outcome_model2 <- lm(ln_ED_LOS ~ batched_hat + admit + tachycardic + 
                       tachypneic + febrile + hypotensive + ARRIVAL_AGE_DI + 
                       capacity_level + dayofweekt + month_of_year + complaint_esi + race, 
                     data = data)

mediation_result2 <- mediate(mediator_model2, outcome_model2, 
                             treat = "batched_hat", mediator = "admit", 
                             robustSE = TRUE)

summary(mediation_result2)

# Extract indirect effects
indirect1 <- mediation_result1$d0  # Indirect effect via imgTests
indirect2 <- mediation_result2$d0  # Indirect effect via admit

# Combine indirect effects
total_indirect <- indirect1 + indirect2

# Extract direct effect (should be the same for both)
direct_effect <- mediation_result1$z0  # Direct effect of batched_hat on ln_ED_LOS

# Calculate total effect
total_effect <- total_indirect + direct_effect

# Proportions mediated
prop_mediated_imgTests <- indirect1 / total_effect
prop_mediated_admit <- indirect2 / total_effect
prop_mediated_total <- total_indirect / total_effect

# Display results
cat("Indirect Effect via imgTests:", indirect1, "\n")
cat("Indirect Effect via admit:", indirect2, "\n")
cat("Total Indirect Effect:", total_indirect, "\n")
cat("Direct Effect:", direct_effect, "\n")
cat("Total Effect:", total_effect, "\n")
cat("Proportion Mediated by imgTests:", prop_mediated_imgTests, "\n")
cat("Proportion Mediated by admit:", prop_mediated_admit, "\n")
cat("Total Proportion Mediated:", prop_mediated_total, "\n")



library(lavaan)



# Residualize variables on fixed effects
library(fixest)

# Residualize imgTests
data$res_imgTests <- resid(feols(imgTests ~ dayofweekt + month_of_year + complaint_esi, data = data))

# Residualize admit
data$res_admit <- resid(feols(admit ~ dayofweekt + month_of_year + complaint_esi, data = data))

# Residualize ln_ED_LOS
data$res_ln_disp_time <- resid(feols(ln_disp_time ~ dayofweekt + month_of_year + complaint_esi, data = data))

# Residualize batched_hat
data$res_batched_hat <- resid(feols(batched_hat ~ dayofweekt + month_of_year + complaint_esi, data = data))
# Define the SEM model
# Define the SEM model using batched_hat
sem_model <- '
  # Mediators: Residualized Number of Tests and Admission Decision
  res_imgTests ~ b1 * res_batched_hat + tachycardic + tachypneic + febrile + 
                 hypotensive + ARRIVAL_AGE_DI 

  res_admit ~ b2 * res_batched_hat + b3 * res_imgTests + tachycardic + 
              tachypneic + febrile + hypotensive + ARRIVAL_AGE_DI  
              
  # Outcome: Residualized LOS predicted by mediators and direct batch effect
  res_ln_disp_time ~ c1 * res_imgTests + c2 * res_admit + c_prime * res_batched_hat + 
                  tachycardic + tachypneic + febrile + 
                  hypotensive + ARRIVAL_AGE_DI

  # Indirect effects
  indirect_imgTests := b1 * c1
  indirect_admit := b2 * c2 + b1 * b3 * c2  # Includes imgTests → admit → LOS
  total_indirect := indirect_imgTests + indirect_admit

  # Total effect
  total_effect := c_prime + total_indirect
'

# Fit the model
fit <- sem(sem_model, data = data)

# Summary of results
summary(fit, standardized = F, fit.measures = TRUE)





# Residualize imgTests
data$res_imgTests <- resid(feols(imgTests ~ dayofweekt + month_of_year + complaint_esi, data = data))

# Residualize ln_disp_time (time to disposition)
data$res_ln_disp_time <- resid(feols(ln_disp_time ~ dayofweekt + month_of_year + complaint_esi, data = data))

# Residualize batched_hat
data$res_batched_hat <- resid(feols(batched_hat ~ dayofweekt + month_of_year + complaint_esi, data = data))

# Define the SEM model
sem_model <- '
  # Mediator: Residualized Number of Imaging Tests
  res_imgTests ~ b1 * res_batched_hat + tachycardic + tachypneic + febrile + 
                 hypotensive + ARRIVAL_AGE_DI 
  
  # Outcome: Residualized Time to Disposition predicted by imaging tests and batching
  res_ln_disp_time ~ c1 * res_imgTests + c_prime * res_batched_hat + 
                     tachycardic + tachypneic + febrile + 
                     hypotensive + ARRIVAL_AGE_DI

  # Indirect effects
  indirect_imgTests := b1 * c1

  # Total effect
  total_effect := c_prime + indirect_imgTests
'

# Fit the model
fit <- sem(sem_model, data = data)

# Summarize results
summary(fit, standardized = F, fit.measures = TRUE)











run_models <- function(data, y_var) {
  
  # Model 1: Mean and SD for batched == 0
  mean_batched_0 <- mean(data[data$batched == 0, ][[y_var]], na.rm = TRUE)
  sd_batched_0 <- sd(data[data$batched == 0, ][[y_var]], na.rm = TRUE)
  
  # Model 2: 2SLS without controls
  model_2 <- feols(
    as.formula(paste(
      y_var, "~ tachycardic + tachypneic + febrile + hypotensive + capacity_level + EXPERIENCE + PROVIDER_SEX  +",
      "ARRIVAL_AGE_DI  | dayofweekt + month_of_year + complaint_esi + race + GENDER |",
      "batched ~ batch.tendency"
    )),
    cluster = ~ED_PROVIDER,
    data = data
  )
  
  # Model 3: 2SLS with controls
  model_3 <- feols(
    as.formula(paste(
      y_var, "~ tachycardic + tachypneic + febrile + hypotensive + capacity_level + EXPERIENCE + PROVIDER_SEX  +",
      "ARRIVAL_AGE_DI + admit.tendency | dayofweekt + month_of_year + complaint_esi + race + GENDER |",
      "batched ~ batch.tendency"
    )),
    cluster = ~ED_PROVIDER,
    data = data
  )
  
  # Model 4: OLS without controls
  model_4 <- feols(
    as.formula(paste(
      y_var, "~ tachycardic + tachypneic + febrile + hypotensive + capacity_level + EXPERIENCE + PROVIDER_SEX  +",
      "ARRIVAL_AGE_DI + test.tendency | dayofweekt + month_of_year + complaint_esi + race + GENDER |",
      "batched ~ batch.tendency"
    )),
    cluster = ~ED_PROVIDER,
    data = data
  )
  
  
  # Extract coefficients and standard errors for batched/fit_batched
  results <- data.frame(
    Model = c("Mean (Sequenced)", "SD (Sequenced)", 
              "2SLS", "2SLS+", "2SLS++"),
    Coefficient = c(
      mean_batched_0,
      sd_batched_0,
      coef(model_2)["fit_batched"],
      coef(model_3)["fit_batched"],
      coef(model_4)["fit_batched"]
    ),
    SE = c(
      NA,
      NA,
      se(model_2)["fit_batched"],
      se(model_3)["fit_batched"],
      se(model_4)["fit_batched"]
    )
  )
  
  print(results)
  return(etable(model_2, model_3, model_4,
                cluster = "ED_PROVIDER", 
                se = "cluster",  keep = c("batched"))
  )
}


run_models(data, "ln_disp_time")
run_models(data, "ln_ED_LOS")
run_models(data, "imgTests")
run_models(data, "RTN_72_HR_ADMIT")

run_models(data, "LAB_PERF")

run_models(data, "US_PERF")
run_models(data, "CON_CT_PERF")
run_models(data, "NON_CON_CT_PERF")
run_models(data, "XR_PERF")

run_models(data, "admit")










# 1. Calculate the actual increase in each test type (not just probability)
# This gives you the test mix for cost calculation
test_effects <- data.frame(
  test_type = c("XR", "US", "CT_con", "CT_noncon"),
  effect = c(0.942, 0.167, 0.188, 0.116),  # Your 2SLS coefficients
  base_rate = c(0.575, 0.173, 0.188, 0.402),  # Sequenced means
  medicare_cost = c(45, 200, 450, 300)  # Medicare reimbursement rates
)

# 2. Calculate weighted average cost per additional test
test_effects$additional_tests <- test_effects$effect * test_effects$base_rate
test_effects$cost_contribution <- test_effects$additional_tests * test_effects$medicare_cost
weighted_avg_cost_per_test <- sum(test_effects$cost_contribution) / sum(test_effects$additional_tests)

# 3. For LOS cost, convert log difference back to actual hours
baseline_los_minutes <- 246  # From your Table 1
los_effect <- 0.837  # Your 2SLS coefficient for log LOS
actual_increase_factor <- exp(los_effect) - 1  # = 1.31 or 131% increase
additional_minutes <- baseline_los_minutes * actual_increase_factor
additional_hours <- additional_minutes / 60

# 4. For admission cost impact
baseline_admission_rate <- 0.288  # From your data
admission_effect <- 0.445  # Your 2SLS coefficient
additional_admissions_per_100 <- admission_effect * 100

# 5. Calculate complier proportion for cost extrapolation
# You could add this to your run_models function:
run_complier_analysis <- function(data) {
  # Get predicted probability of batching at min and max batch tendency
  min_tendency <- quantile(data$batch.tendency, 0.1)
  max_tendency <- quantile(data$batch.tendency, 0.9)
  
  # First stage prediction
  first_stage <- feols(
    batched ~ batch.tendency + tachycardic + tachypneic + febrile + hypotensive + 
      capacity_level + EXPERIENCE + PROVIDER_SEX + ARRIVAL_AGE_DI | 
      dayofweekt + month_of_year + complaint_esi + race + GENDER,
    data = data
  )
  
  # Predict at min and max
  data_min <- data
  data_min$batch.tendency <- min_tendency
  data_max <- data
  data_max$batch.tendency <- max_tendency
  
  prob_min <- mean(predict(first_stage, newdata = data_min))
  prob_max <- mean(predict(first_stage, newdata = data_max))
  
  complier_rate <- prob_max - prob_min
  
  return(list(
    complier_rate = complier_rate,
    always_takers = prob_min,
    never_takers = 1 - prob_max
  ))
}
complier_results <- run_complier_analysis(data)
